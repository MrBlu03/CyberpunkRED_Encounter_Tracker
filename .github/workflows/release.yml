name: Release Electron App

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: read

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install Dependencies
        run: npm ci

      - name: Install ImageMagick
        if: matrix.os != 'windows-latest'
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y imagemagick
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            brew install imagemagick
          fi

      - name: Prepare App Icons
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p build/icons
          convert favicon.ico -resize 1024x1024 build/icons/1024x1024.png
          convert favicon.ico -resize 512x512 build/icons/512x512.png
          convert favicon.ico -resize 256x256 build/icons/256x256.png

      - name: Build Electron App
        run: npm run build
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rename Artifacts
        shell: bash
        run: |
          cd dist
          for file in *; do
            if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
              mv "$file" "CyberpunkRED_Encounter_Tracker-Windows-$file"
            elif [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
              mv "$file" "CyberpunkRED_Encounter_Tracker-Linux-$file"
            elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
              mv "$file" "CyberpunkRED_Encounter_Tracker-macOS-$file"
            fi
          done

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: electron-build-${{ matrix.os }}
          path: dist/
          retention-days: 5

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Get Package Version
        id: package-version
        run: |
          VERSION=$(node -p "require('./package.json').version")
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.package-version.outputs.version }}
          name: Release v${{ steps.package-version.outputs.version }}
          files: |
            dist/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: List Release Assets
        run: |
          echo "Release assets:"
          ls -R dist/